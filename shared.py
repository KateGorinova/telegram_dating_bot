#bot

import telebot

bot = telebot.TeleBot('-')

TELEGRAM_PROVIDER_TOKEN = "-"

ADMIN_CHAT_ID = -


#key for crypt 
import hmac
import hashlib

def load_key(file_path="secret.key") -> bytes:
    with open(file_path, 'rb') as key_file:
        key = key_file.read()
    return key

SECRET_KEY = load_key()

#–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
user_states = {} #–≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã. user_states[user_id] = 'wait bio' => —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–ª—å–∑–æ–∞–≤—Ç–µ–ª—å, –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ–º –µ–≥–æ –∞–Ω–∫–µ—Ç—ã
verif_codes = {} #—Ç—É—Ç —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–æ–¥—ã –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email
payloads_ids = {} #—Å–æ—Ö—Ä–∞–Ω—è–µ–º id –ø–ª–∞—Ç–µ–∂–µ–π —é–∑–µ—Ä–æ–≤ 

#database

import sqlite3

conn = sqlite3.connect('users.db', check_same_thread=False)

with conn:
    conn.execute('''
        CREATE TABLE IF NOT EXISTS user_profiles (
            user_id INTEGER PRIMARY KEY,
            city TEXT,
            min_age INTEGER,
            max_age INTEGER,
            email TEXT,
            gender INTEGER,
            preferences INTEGER,
            name TEXT,
            age TEXT,
            balance INTEGER DEFAULT 0,
            photo BLOB,
            bio TEXT,
            status_dating INTEGER,
            last_online TEXT,
            amount_of_wins INTEGER DEFAULT 0,
            amount_of_pars INTEGER DEFAULT 0,
            subscribe INTEGER,
            last_email_send INTEGER,
            status_ban TEXT DEFAULT norm
        )
    ''')

#—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤–Ω—É—Ç—Ä–∏ –ë–î 

with conn: 
    conn.execute('''
        CREATE TABLE IF NOT EXISTS votes (
            user_id INTEGER,
            battle_id INTEGER,
            vote_side TEXT,  -- 'left' –∏–ª–∏ 'right'
            PRIMARY KEY (user_id, battle_id)
        )
    ''')
    
with conn:
    conn.execute('''
        CREATE TABLE IF NOT EXISTS evaluations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            evaluator_id INTEGER,
            evaluated_id INTEGER,
            evaluation_date TEXT,
            FOREIGN KEY (evaluator_id) REFERENCES user_profiles(user_id),
            FOREIGN KEY (evaluated_id) REFERENCES user_profiles(user_id)
        );
    ''')
    conn.commit()

with conn:
    conn.execute('''
        CREATE TABLE IF NOT EXISTS battle_queue (
        user_id INTEGER PRIMARY KEY,
        join_time INTEGER
        );
    ''')
    
with conn:
    conn.execute('''CREATE TABLE IF NOT EXISTS battles (
    battle_id INTEGER PRIMARY KEY AUTOINCREMENT,
    participant_1 INTEGER,
    participant_2 INTEGER,
    participant_1_photo BLOB,  -- –§–æ—Ç–æ –ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    participant_2_photo BLOB,  -- –§–æ—Ç–æ –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    start_time INTEGER,
    end_time INTEGER,
    votes_participant_1 INTEGER DEFAULT 0,
    votes_participant_2 INTEGER DEFAULT 0,
    winner INTEGER,
    status TEXT DEFAULT 'active',
    FOREIGN KEY (participant_1) REFERENCES user_profiles(user_id),
    FOREIGN KEY (participant_2) REFERENCES user_profiles(user_id)
    );
    ''')

with conn:
    conn.execute("""
        CREATE TABLE IF NOT EXISTS referrals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            referred_user_id INTEGER NOT NULL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        );
    """)
    conn.execute("""
        CREATE TABLE IF NOT EXISTS referral_rewards (
            user_id INTEGER PRIMARY KEY,
            referral_count INTEGER DEFAULT 0
        );
    """)


#buttons
from telebot import types

#–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏, inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã 
genders = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_m = types.KeyboardButton('–ü–∞—Ä–µ–Ω—å')
but_j = types.KeyboardButton('–î–µ–≤—É—à–∫–∞')
genders.add(but_m,but_j)


start_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_znakomstva = types.KeyboardButton('–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ‚ù§Ô∏è')
but_battle = types.KeyboardButton('–ë–∞—Ç—Ç–ª –§–æ—Ç–æ üî•')
but_settings = types.KeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è')
start_menu.add(but_znakomstva,but_battle, but_settings)

but_back = types.KeyboardButton('–ù–∞–∑–∞–¥')

dating_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_my_anket = types.KeyboardButton('–ú–æ—è –ê–Ω–∫–µ—Ç–∞')
but_find = types.KeyboardButton('–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã')
dating_menu.add(but_my_anket, but_find, but_back)

looking_for_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_girl = types.KeyboardButton('–î–µ–≤—É—à–∫–∏')
but_boy = types.KeyboardButton('–ü–∞—Ä–Ω–∏')
but_dont_matter = types.KeyboardButton('–ù–µ –≤–∞–∂–Ω–æ')
looking_for_menu.add(but_girl,but_boy,but_dont_matter)

battle_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_my_profile = types.KeyboardButton('–ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å')
but_list_battles = types.KeyboardButton('–ê–∫—Ç–∏–≤–Ω—ã–µ –ë–∞—Ç—Ç–ª—ã')
but_participation = types.KeyboardButton('–ü—Ä–∏–Ω—è—Ç—å –£—á–∞—Å—Ç–∏–µ')
but_my_battles = types.KeyboardButton('–ú–æ–∏ –ë–∞—Ç—Ç–ª—ã')
but_top_5 = types.KeyboardButton('–¢–æ–ø 5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
battle_menu.add(but_my_profile, but_list_battles, but_participation, but_my_battles, but_top_5, but_back)

rating_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_like = types.KeyboardButton('–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è')
but_dislike = types.KeyboardButton('–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è')
but_to_anket = types.KeyboardButton('–ö –ê–Ω–∫–µ—Ç–µ')
rating_menu.add(but_like,but_dislike,but_to_anket)

curr_battle_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_first = types.KeyboardButton('–°–ª–µ–≤–∞ –ª—É—á—à–µ!')
but_sec = types.KeyboardButton('–°–ø—Ä–∞–≤–∞ –ª—É—á—à–µ!')
but_to_menu = types.KeyboardButton('–í –º–µ–Ω—é')
curr_battle_menu.add(but_first, but_sec, but_to_menu)

univs = types.InlineKeyboardMarkup()
but_mirea = types.InlineKeyboardButton(f'–†–¢–£ –ú–ò–†–≠–ê', callback_data='univ_mirea')
but_hse = types.InlineKeyboardButton(f'–ù–ò–£ –í–®–≠', callback_data='univ_hse')
univs.add(but_mirea, but_hse)

markup_settings = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_change_anket = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É')
but_referals = types.KeyboardButton('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞')
but_balance = types.KeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
markup_settings.add(but_change_anket, but_referals, but_balance, but_back)

markup_change_anket = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_name = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è')
but_city = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥')
but_age = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç')
but_prefer_age = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É')
but_gender = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª')
but_photo = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ')
markup_change_anket.add(but_photo, but_name, but_age, but_city, but_prefer_age, but_gender, but_back)


markup_referals = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_referals = types.KeyboardButton('üîó–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞')
markup_referals.add(but_referals, "üèÜ–ú–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã", "üî¢–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", but_back)
